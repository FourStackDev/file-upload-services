package org.fourstack.fileupload.exceptionhandling;

import java.time.LocalDateTime;

import org.fourstack.fileupload.codetype.CustomErrorCodesAndMsgs;
import org.fourstack.fileupload.payload.ErrorResponse;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

@ControllerAdvice
public class FileUploadExceptionHandler extends ResponseEntityExceptionHandler {

	/**
	 * Exception Handler method to handle ResourceFileNotFoundException.
	 * <p>
	 * Whenever the ResourceFileNotFoundException occurred, then ErrorResponse will
	 * be generated by the below method and send back to the Requester
	 * </p>
	 * 
	 * @param exception Type of Exception handled
	 * @param request   WebRequest instance
	 * @return ErrorResponse Entity
	 */
	@ExceptionHandler(value = ResourceFileNotFoundException.class)
	public ResponseEntity<ErrorResponse> handleErrorResponse(ResourceFileNotFoundException exception,
			WebRequest request) {
		ErrorResponse response = new ErrorResponse();
		response.setCustomErrorCode(CustomErrorCodesAndMsgs.RESOURCE_NOT_FOUND_CODE);
		response.setCustomErrorMsg(CustomErrorCodesAndMsgs.RESOURCE_NOT_FOUND_MSG);
		response.setCustomErrorDescription("Sorry Requested File not Found, please try with existing resources");

		response.setErrorCode(HttpStatus.NOT_FOUND.value());
		response.setErrorMsg(exception.getMessage());
		response.setStatus(HttpStatus.NOT_FOUND);

		response.setUrlDetails(request.getDescription(false));
		response.setTimeStamp(LocalDateTime.now());

		return new ResponseEntity<ErrorResponse>(response, HttpStatus.NOT_FOUND);
	}
	
	/**
	 * Exception Handler method to handle FileStorageException.
	 * <p>
	 * Whenever the FileStorageException occurred, then ErrorResponse will
	 * be generated by the below method and send back to the Requester
	 * </p>
	 * 
	 * @param exception Type of Exception handled
	 * @param request   WebRequest instance
	 * @return ErrorResponse Entity
	 */
	@ExceptionHandler(value = FileStorageException.class)
	public ResponseEntity<ErrorResponse> handleErrorResponse(FileStorageException exception, WebRequest request) {
		ErrorResponse response = new ErrorResponse();
		response.setCustomErrorCode(CustomErrorCodesAndMsgs.INVALID_FILE_NAME_CODE);
		response.setCustomErrorMsg(CustomErrorCodesAndMsgs.INVALID_FILE_NAME_MSG);
		response.setCustomErrorDescription(exception.getMessage());
		
		response.setErrorCode(HttpStatus.NOT_ACCEPTABLE.value());
		response.setErrorMsg(exception.getMessage());
		response.setStatus(HttpStatus.NOT_ACCEPTABLE);
		
		response.setUrlDetails(request.getDescription(false));
		response.setTimeStamp(LocalDateTime.now());
		
		return new ResponseEntity<ErrorResponse>(response, HttpStatus.NOT_ACCEPTABLE);
	}
	
	/**
	 * Exception Handler method to handle DatabaseConstraintViolationException.
	 * <p>
	 * Whenever the ConstraintViolationException occurred, then ErrorResponse will
	 * be generated by the below method and send back to the Requester
	 * </p>
	 * 
	 * @param exception Type of Exception handled
	 * @param request   WebRequest instance
	 * @return ErrorResponse Entity
	 */
	@ExceptionHandler(value = DatabaseConstraintViolationException.class)
	public ResponseEntity<ErrorResponse> handleUniqueConstraintException(DatabaseConstraintViolationException exception, WebRequest request) {
		ErrorResponse response = new ErrorResponse();
		response.setCustomErrorCode(CustomErrorCodesAndMsgs.UNIQUE_CONSTRAINT_CODE);
		response.setCustomErrorMsg(CustomErrorCodesAndMsgs.UNIQUE_CONSTRAINT_MSG);
		response.setCustomErrorDescription(exception.getCustomErrorMessage());
		
		response.setErrorCode(HttpStatus.CONFLICT.value());
		response.setErrorMsg(exception.getMessage());
		response.setStatus(HttpStatus.CONFLICT);
		
		response.setUrlDetails(request.getDescription(false));
		response.setTimeStamp(LocalDateTime.now());
		
		return new ResponseEntity<ErrorResponse>(response, HttpStatus.CONFLICT);
		
	}
}
